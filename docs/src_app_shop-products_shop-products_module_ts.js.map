{"version":3,"file":"src_app_shop-products_shop-products_module_ts.js","mappings":"kWAUO,QAMLA,YACEC,EACQC,oBANVC,aAAU,GAEDA,aAAU,GAMjBA,KAAKC,QAAWH,EAAyBI,SAASC,OAGpDC,YAIAC,yBACEL,KAAKM,UAAUC,KAAK,eAAgB,aAAW,CAC7CC,SAAU,6CAnBHC,GAAiBC,kDAAjBD,EAAiBE,mQCV9BD,oBAIQA,gCAASX,6BACbW,kBACIA,kBACJA,gBAJIA,uLCED,QAEHE,UACId,EACAC,EAAuB,MACvBc,EAKgB,SAChBC,EAAqB,QACrBC,EAAiB,MAGjB,OAAa,MAATjB,GACO,QACHA,EACAiB,GACA,QAAkBhB,EAAc,QAChCA,EACAe,GAID,4CCzBXJ,iBACsB,UADtBA,CACsB,eADtBA,CACsB,gBAKGA,iBAAKA,QACxBA,iBAEEA,iBAEFA,QACAA,0BACAA,4BAAkB,WAAlBA,CAAkB,gBAINA,sDAASA,EAATM,MAASC,iBAAuB,MACtCP,oBACEA,gCACFA,QACAA,yCACFA,gBAKRA,mBAAmB,oBAAnBA,CAAmB,qBAAnBA,CAAmB,cAKXA,uBACFA,QACAA,iBAAMA,UAAmBA,QACzBA,oBAAmC,uBAErCA,UAEFA,qBAAU,aACWA,kCAAgBA,QACnCA,0BAAe,cAGXA,uBACFA,QACAA,mBAAcA,sBAAIA,QAClBA,mBACEA,qCACAA,oBAEiC,UAC1BA,qCAAwBA,QAC7BA,uBACFA,YAGJA,0BAAe,cAGXA,yCACFA,QACAA,mBAAcA,4BAAeA,QAC7BA,mBAIFA,QACAA,0BAAe,cAGXA,6BACFA,QACAA,mBAAcA,qBAAQA,QACtBA,mBACEA,6BAKFA,UAEFA,0BAAe,cAGXA,0BACFA,QACAA,mBAAcA,uBAAUA,UAG1BA,0BAAe,cAGXA,wBACFA,QACAA,mBAAcA,mBAAMA,UAGtBA,wBACAA,mBAAmBA,sBAASA,QAC5BA,0BAAe,cAGXA,0BACFA,QACAA,mBAAcA,8BAAcA,YAIhCA,wBAA2B,0BAE7BA,iCArGWA,gCAwBCA,2BAESA,+CAYbA,gDAIOA,gCA0DKA,gFD9GbQ,qDAAkBC,WAE3B,UADC,wCEOE,QAKLtB,YACUC,EACAC,EACDc,GAFCb,aACAA,uBACDA,mBANTA,mBAAgBoB,IAChBpB,cAAW,IAAIqB,IAQfjB,iBACE,MAAML,EAA4C,QAAjBD,OAAKwB,MAAMC,cAAM,eAAEC,SAASC,OAAOC,GAEhE3B,IACFC,KAAK2B,SAAW3B,KAAK4B,gBAAgBC,QAAQ9B,IAIjDkB,eAAenB,2CAnBJgC,GAA2BpB,4DAA3BoB,EAA2BnB,+4BDbxCD,iBAA2C,WAEvCA,8BACFA,QACAA,iBACEA,0CAiHFA,iBAjHQA,mkBELEqB,qDAAU,KAClBC,gBACAC,6BACAA,6BACAA,+BACAA,uBCLQC,oDCYJxB,4BAGEA,qBAEAA,2BAEcA,4DAAUA,EAAVM,MAAUmB,iCAAmCzB,SAAaA,gDAD1DA,6DAC6CA,gEAG7DA,4BACkC,cADlCA,CACkC,aAK5BA,SACFA,UAEFA,2BAEcA,4DAAUA,EAAVM,MAAUoB,6BAA+B1B,SAAaA,gDAP5DA,8CAEJA,kFAGUA,sDAAwC,mDAECA,wBClB1D,QAwBLb,cAtBUG,qBAAkB,IAAIU,MAExBV,iBAAc,CAACF,EAAkBC,KAChB,CACrBsC,aAAcvC,EAAKwC,UAAYxC,EAAKwC,SAASC,OAAS,EACtDC,KAAM1C,EAAK0C,KACXC,QACAf,GAAI5B,EAAK4B,KAIb1B,iBAAc,IAAI0C,KAAgC5C,GAAQA,EAAK2C,MAAO3C,GAAQA,EAAKuC,YAEnFrC,mBAAgB,IAAI2C,KAAiB3C,KAAK4C,YAAc9C,GAAcA,EAAK2C,MAAQ3C,GAAcA,EAAKuC,WAAavC,GAAcA,EAAKwC,UAEtItC,gBAAa,IAAI2C,KAAsB3C,KAAK6C,YAAa7C,KAAK8C,eAG9D9C,wBAAqB,IAAI+C,MAA+B,GAExD/C,cAAYF,GAAyBA,EAAK2C,MA+J1CzC,cAAW,CAACF,EAAWC,IAAyBA,EAAKsC,WA5JnDrC,KAAKgD,WAAWC,KAAO,CACrB,CACET,KAAM,kBACNd,GAAI,GACJY,SAAU,CACR,CAAEE,KAAM,aAAWd,GAAIN,WACvB,CAAEoB,KAAM,aAAcd,GAAIN,eAG9B,CACEoB,KAAM,kBACNd,GAAI,GACJY,SAAU,CACR,CAAEE,KAAM,cAAed,GAAI,eAC3B,CAAEc,KAAM,UAAWd,GAAI,WACvB,CAAEc,KAAM,WAAYd,GAAI,YACxB,CAAEc,KAAM,cAAed,GAAI,eAC3B,CAAEc,KAAM,UAAWd,GAAI,WACvB,CAAEc,KAAM,WAAYd,GAAI,cAG5B,CACEc,KAAM,YACNd,GAAI,GACJY,SAAU,CACR,CAAEE,KAAM,cAAed,GAAIK,YAC3B,CAAES,KAAM,+BAAwBd,GAAIK,kBACpC,CAAES,KAAM,+BAAwBd,GAAIK,kBACpC,CAAES,KAAM,gCAAyBd,GAAIK,mBACrC,CAAES,KAAM,aAAcd,GAAIK,cAG9B,CACES,KAAM,mBACNd,GAAI,GACJY,SAAU,CACR,CAAEE,KAAM,MAAOd,GAAI,OACnB,CAAEc,KAAM,MAAOd,GAAI,KACnB,CAAEc,KAAM,MAAOd,GAAI,KACnB,CAAEc,KAAM,MAAOd,GAAI,KACnB,CAAEc,KAAM,MAAOd,GAAI,KACnB,CAAEc,KAAM,MAAOd,GAAI,OAGvB,CACEc,KAAM,wBACNd,GAAI,GACJY,SAAU,CACR,CAAEE,KAAM,MAAOd,GAAI,KACnB,CAAEc,KAAM,MAAOd,GAAI,KACnB,CAAEc,KAAM,MAAOd,GAAI,KACnB,CAAEc,KAAM,MAAOd,GAAI,KACnB,CAAEc,KAAM,MAAOd,GAAI,KACnB,CAAEc,KAAM,MAAOd,GAAI,OAGvB,CACEc,KAAM,WACNd,GAAI,GACJY,SAAU,CACR,CAAEE,KAAM,KAAMd,GAAI,KAClB,CAAEc,KAAM,KAAMd,GAAI,KAClB,CAAEc,KAAM,KAAMd,GAAI,KAClB,CAAEc,KAAM,KAAMd,GAAI,KAClB,CAAEc,KAAM,KAAMd,GAAI,KAClB,CAAEc,KAAM,KAAMd,GAAI,QAM1BtB,WACEJ,KAAK6C,YAAYK,OAAOlD,KAAK6C,YAAYM,UAAU,IACnDnD,KAAK6C,YAAYK,OAAOlD,KAAK6C,YAAYM,UAAU,IAIrDC,cAActD,GACZ,MAAMC,EAAeC,KAAKqD,SAASvD,GAEnC,GAAIC,EAAe,EACjB,OAAO,KAKT,QAASe,EAFUd,KAAK6C,YAAYM,UAAUG,QAAQxD,GAAQ,EAErCgB,GAAK,EAAGA,IAAK,CACpC,MAAMC,EAAcf,KAAK6C,YAAYM,UAAUrC,GAE/C,GAAId,KAAKqD,SAAStC,GAAehB,EAC/B,OAAOgB,EAGX,OAAO,KAITwC,uBAAuBzD,GACrB,MAAMC,EAAcC,KAAK6C,YAAYW,eAAe1D,GAIpD,OAHwBC,EAAYwC,OAAS,GAAKxC,EAAY0D,MAAM3C,GAC3Dd,KAAK0D,mBAAmBC,WAAW7C,IAM9C8C,6BAA6B9D,GAG3B,OAAOE,KAFkB6C,YAAYW,eAAe1D,GACzB+D,KAAK/C,GAASd,KAAK0D,mBAAmBC,WAAW7C,MAC1Dd,KAAKuD,uBAAuBzD,GAIhDsC,wBAAwBtC,GACtBgE,QAAQC,IAAIjE,EAAM,gCAClBE,KAAK0D,mBAAmBM,OAAOlE,GAC/B,MAAMC,EAAcC,KAAK6C,YAAYW,eAAe1D,GACpDE,KAAK0D,mBAAmBC,WAAW7D,GAC/BE,KAAK0D,mBAAmBO,UAAUlE,GAClCC,KAAK0D,mBAAmBQ,YAAYnE,GAGxCA,EAAYoE,QAAQtD,GAASb,KAAK0D,mBAAmBC,WAAW9C,IAChEb,KAAKoE,yBAAyBtE,GAIhCuE,uBAAuBvE,GACrB,MAAMC,EAAeC,KAAK0D,mBAAmBC,WAAW7D,GAClDe,EAAcb,KAAK6C,YAAYW,eAAe1D,GAC9CgB,EAAkBD,EAAY0B,OAAS,GAAK1B,EAAY4C,MAAM1C,GAC3Df,KAAK0D,mBAAmBC,WAAW5C,IAExChB,IAAiBe,EACnBd,KAAK0D,mBAAmBQ,SAASpE,IACvBC,GAAgBe,GAC1Bd,KAAK0D,mBAAmBO,OAAOnE,GAKnCsE,yBAAyBtE,GACvB,IAAIC,EAAgCC,KAAKoD,cAActD,GACvD,KAAOC,GACLC,KAAKqE,uBAAuBtE,GAC5BA,EAASC,KAAKoD,cAAcrD,GAKhCoC,4BAA4BrC,GAC1BgE,QAAQC,IAAIjE,EAAM,oCAClBE,KAAK0D,mBAAmBM,OAAOlE,GAC/BE,KAAKoE,yBAAyBtE,0CAlLrBwE,8BAA2B3D,8rBDfxCD,iBAAkC,UAAlCA,CAAkC,gBAG5BA,eACAA,kBAAiCA,oCAAcA,YAGnDA,iBAAoB,eAApBA,CAAoB,gBAKdA,iCAUAA,kCAaFA,qBA1BUA,0CAAyB,6BAaQA,2VDtBjD,SAAYuB,GACRA,oBACAA,kBACAA,yBACAA,uBAJJ,CAAYC,MAAS,2EGUXxB,wBAEEA,SACFA,kCAFYA,uBACVA,iCCAL,QAaLb,YAAoBC,8BAXVE,mBAAgB,IAAIU,MAE9BV,WAAyB,CACvB,CAAEuE,MAAOrC,UAAmBsC,MAAO,qBACnC,CAAED,MAAOrC,SAAkBsC,MAAO,gBAClC,CAAED,MAAOrC,aAAsBsC,MAAO,4BACtC,CAAED,MAAOrC,YAAqBsC,MAAO,gCAEvCxE,cAAWyE,SACXzE,sBAAmByE,IAKnBrE,WACEJ,KAAK0E,4BAGPC,eAAe7E,IAQf4E,qDCrCEhE,iBAEEA,8BACFA,mCALFA,iBAEEA,wBAqDFA,8BArDQA,yDAwDNA,iBAEEA,8BACFA,mCALFA,iBAEEA,wBA+EFA,8BA/EQA,wED/CGkE,GAAyBlE,qCAAzBkE,EAAyBjE,mcDZtCD,iBAAiB,UAAjBA,CAAiB,gBAGXA,eACAA,kBAA+BA,mCAAaA,QAC5CA,4BACqC,eACxBA,8BAAaA,QACxBA,sBAAY,iBACEA,0BAAaA,QACzBA,gCAIFA,UAEFA,sCAGyBA,kCAAUX,yCACjCW,gCAAmDA,gBAAyBA,QAC5EA,gCAAmDA,iBAA2BA,uBAX/CA,mCAORA,mCAGJA,gDACAA,yWGPpB,QAeLb,cAbSG,cAA6B,GAC7BA,cAAWyE,SACXzE,cAA0B,EAC1BA,aAAe,CACtB6E,eAAe,EACfC,kBAAkB,GAEV9E,oBAAiB,IAAIU,MACrBV,uBAAoB,IAAIU,MAElCV,sBAAmByE,IACnBzE,mBAAgBoB,IAIhBhB,YAGAa,eAAenB,GACbE,KAAK+E,eAAeC,KAAKlF,GAG3BmF,kBAAkBnF,GAChBE,KAAKkF,kBAAkBF,KAAKlF,0CAzBnBqF,8BAAqBxE,wXDdlCD,WACEA,wBAwDAA,wBAkFFA,eA3IcA,6BACNA,uDAwDAA,85BE7CD,QAKLb,YACUC,EACAC,GADAC,uBACAA,mBALVA,cAAWyE,SACXzE,eAAY,IAAIqB,IAQhBjB,WACEJ,KAAKoF,cAGPA,cACEpF,KAAKqF,UAAYrF,KAAK4B,gBAAgB0D,SAGxCX,eAAe7E,GACbE,KAAKuF,SAAWzF,yCApBP0F,GAAyB9E,gDAAzB8E,EAAyB7E,iMCZtCD,iBAA6C,WAEzCA,oCACFA,QACAA,iBAAmB,8BACOA,yCAAiBX,sBAAwBW,QACjEA,gDAKFA,iBALqBA,kGCDvB,MAAM+E,GAAiB,CACnB,CAAEC,KAAM,GAAIC,UAAWH,GACvB,CAAEE,KAAM,MAAOC,UAAW7D,IAQvB,+CAAM8D,4DAJA,CAACC,cAAsBJ,KACtBI,QCWP,+CAAMC,6DAJA,GACVC,SAXQ,CACPH,EACAI","names":["constructor","e","o","this","baseUrl","location","origin","ngOnInit","clickOnCopyToClipboard","_snackBar","open","duration","v","t","selectors","transform","c","r","a","oxw","addCartProduct","p","pure","_","O","route","parent","snapshot","params","id","product$","productsService","getById","C","d","UNDER100","n","m","todoLeafItemSelectionToggle","todoItemSelectionToggle","expandable","children","length","name","level","G","l","transformer","treeControl","treeFlattener","W","dataSource","data","expand","dataNodes","getParentNode","getLevel","indexOf","descendantsAllSelected","getDescendants","every","checklistSelection","isSelected","descendantsPartiallySelected","some","console","log","toggle","select","deselect","forEach","checkAllParentsSelection","checkRootNodeSelection","Z","value","label","f","checkLocalStorageViewMode","changeViewMode","T","showAddButton","showRemoveButton","clickAddToCart","emit","removeCartProduct","clickRemoveToCart","P","getProducts","products$","getAll","viewMode","S","ct","path","component","u","M","h","imports","L"],"sourceRoot":"webpack:///","sources":["./src/app/shared/components/copy-link/copy-link.component.ts","./src/app/shared/components/copy-link/copy-link.component.html","./src/app/shared/pipes/currency.pipe.ts","./src/app/shop-products/shop-product-details/shop-product-details.component.html","./src/app/shop-products/shop-product-details/shop-product-details.component.ts","./src/app/shared/enum/price-range.ts","./src/app/shared/enum/sort-value.ts","./src/app/shop-products/shop-products-filter/shop-products-filter.component.html","./src/app/shop-products/shop-products-filter/shop-products-filter.component.ts","./src/app/shop-products/shop-products-sort/shop-products-sort.component.html","./src/app/shop-products/shop-products-sort/shop-products-sort.component.ts","./src/app/shared/components/products-card/products-card.component.html","./src/app/shared/components/products-card/products-card.component.ts","./src/app/shop-products/shop-products-view/shop-products-view.component.ts","./src/app/shop-products/shop-products-view/shop-products-view.component.html","./src/app/shop-products/shop-products-routing.module.ts","./src/app/shop-products/shop-products.module.ts"],"sourcesContent":["import { PlatformLocation } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-copy-link',\n  templateUrl: './copy-link.component.html',\n  styleUrls: ['./copy-link.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CopyLinkComponent implements OnInit {\n\n  baseUrl = '';\n\n  @Input() pathUrl = '';\n\n  constructor(\n    platformLocation: PlatformLocation,\n    private _snackBar: MatSnackBar\n  ) {\n    this.baseUrl = (platformLocation as any).location.origin;\n  }\n\n  ngOnInit(): void {\n\n  }\n\n  clickOnCopyToClipboard() {\n    this._snackBar.open('Link copiat!', 'Închide', {\n      duration: 2000,\n    });\n  }\n}\n","<button mat-icon-button\n        aria-label=\"Copiază link-ul.\"\n        matTooltip=\"Copiază link-ul.\"\n        [cdkCopyToClipboard]=\"(pathUrl)? (baseUrl + pathUrl) : (baseUrl)\"\n        (click)=\"clickOnCopyToClipboard()\">\n    <span class=\"material-icons\">\n        link\n    </span>\n</button>","import { formatCurrency, getCurrencySymbol } from '@angular/common';\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport memo from 'memo-decorator';\r\n\r\n@Pipe({ name: 'azetDtCurrency' })\r\nexport class AzetDTCurrencyPipe implements PipeTransform {\r\n    @memo()\r\n    transform(\r\n        value: number | null,\r\n        currencyCode: string = 'Lei',\r\n        display:\r\n            | 'code'\r\n            | 'symbol'\r\n            | 'symbol-narrow'\r\n            | string\r\n            | boolean = 'symbol',\r\n        digitsInfo: string = '3.2-2',\r\n        locale: string = 'ro',\r\n    ): string | null {\r\n\r\n        if (value != null) {\r\n            return formatCurrency(\r\n                value,\r\n                locale,\r\n                getCurrencySymbol(currencyCode, 'wide'),\r\n                currencyCode,\r\n                digitsInfo,\r\n            );\r\n        }\r\n\r\n        return '';\r\n    }\r\n}","<div class=\"row product-details-container\">\n  <div class=\"col-12\">\n    <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n  </div>\n  <div class=\"col-12\">\n    <div *ngIf=\"(product$ | async) as product\"\n         class=\"row mt-5\">\n      <div class=\"col-4\">\n        <mat-card class=\"product-card\">\n          <mat-chip matTooltip=\"Super ofertă, nu o rata!\"\n                    matTooltipPosition=\"above\"\n                    selected>- 21%</mat-chip>\n          <div mat-card-image\n               class=\"product-card__img text-center\">\n            <img src=\"../../assets/pictures/tires/tire.png\"\n                 [alt]=\"product[0].name\">\n          </div>\n          <mat-divider inset></mat-divider>\n          <mat-card-actions>\n            <div class=\"d-flex justify-content-center\">\n              <button mat-raised-button\n                      color=\"primary\"\n                      (click)=\"addCartProduct(product[0])\">\n                <span class=\"material-icons\">\n                  add_shopping_cart\n                </span>\n                ADAUGĂ ÎN COȘ\n              </button>\n            </div>\n          </mat-card-actions>\n        </mat-card>\n      </div>\n      <div class=\"col-8\">\n        <mat-toolbar class=\"mat-elevation-z6\"\n                     color=\"primary\">\n          <mat-toolbar-row>\n            <span class=\"material-icons mr-2\">\n              verified\n            </span>\n            <span>{{product[0].name}}</span>\n            <span class=\"navbar-spacer\"></span>\n            <app-copy-link [pathUrl]=\"'/products/'+ product[0].id\"></app-copy-link>\n          </mat-toolbar-row>\n        </mat-toolbar>\n        <mat-list>\n          <div mat-subheader>Detalii anvelopă</div>\n          <mat-list-item>\n            <span mat-list-icon\n                  class=\"material-icons\">\n              payments\n            </span>\n            <div mat-line>Preț</div>\n            <div mat-line>\n              {{product[0].price | azetDtCurrency}}\n              <span class=\"sale mx-2\"\n                    matTooltip=\"Super ofertă, nu o rata!\"\n                    matTooltipPosition=\"above\">\n                <del>{{300 | azetDtCurrency}}</del>\n                ( - 21%)\n              </span>\n            </div>\n          </mat-list-item>\n          <mat-list-item>\n            <span mat-list-icon\n                  class=\"material-icons\">\n              production_quantity_limits\n            </span>\n            <div mat-line>Disponibilitate</div>\n            <div mat-line>\n              <!-- <app-product-state [productState]=\"product[0].state\"\n                                   [productQuantity]=\"product[0].quantity\"></app-product-state> -->\n            </div>\n          </mat-list-item>\n          <mat-list-item>\n            <span mat-list-icon\n                  class=\"material-icons\">\n              directions_car\n            </span>\n            <div mat-line>Vehicule</div>\n            <div mat-line>\n              <mat-chip-list aria-label=\"Vehicule\">\n                <!-- <mat-chip *ngFor=\"let carCategory of product[0].carCategories\">\n                    {{carCategory}}\n                  </mat-chip> -->\n              </mat-chip-list>\n            </div>\n          </mat-list-item>\n          <mat-list-item>\n            <span mat-list-icon\n                  class=\"material-icons\">\n              square_foot\n            </span>\n            <div mat-line>Dimensiune</div>\n            <!-- <div mat-line>{{product[0].size}}</div> -->\n          </mat-list-item>\n          <mat-list-item>\n            <span mat-list-icon\n                  class=\"material-icons\">\n              edit_road\n            </span>\n            <div mat-line>Profil</div>\n            <!-- <div mat-line>{{product[0].profile}}</div> -->\n          </mat-list-item>\n          <mat-divider></mat-divider>\n          <div mat-subheader>Descriere</div>\n          <mat-list-item>\n            <span mat-list-icon\n                  class=\"material-icons\">\n              description\n            </span>\n            <div mat-line>Câteva detalii</div>\n            <!-- <div mat-line>{{product[0].description}}</div> -->\n          </mat-list-item>\n        </mat-list>\n        <mat-divider></mat-divider>\n        <app-contact-list [showJuridicDetails]=\"false\"></app-contact-list>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Product } from 'src/app/shared/class/base-cart-item';\nimport { State } from 'src/app/shared/enum/state';\nimport { CartService } from 'src/app/shared/service/cart.service';\nimport { ProductsService } from 'src/app/shared/service/products.service';\n\n@Component({\n  selector: 'app-shop-product-details',\n  templateUrl: './shop-product-details.component.html',\n  styleUrls: ['./shop-product-details.component.scss']\n})\nexport class ShopProductDetailsComponent implements OnInit {\n\n  stateTemplate = State;\n  product$ = new Observable<Product[]>();\n\n  constructor(\n    private route: ActivatedRoute,\n    private productsService: ProductsService,\n    public cartService: CartService\n  ) { }\n\n  ngOnInit(): void {\n    const productId: string | null = this.route.parent?.snapshot.params['id'];\n\n    if (productId) {\n      this.product$ = this.productsService.getById(productId);\n    }\n  }\n\n  addCartProduct(product: Product) {\n    // this.cartService.addCartProduct(product);\n  }\n}\n","export enum PriceRange {\n    UNDER100 = '<100',\n    BETWEEN100_250 = '>100&<250',\n    BETWEEN250_500 = '>250&<500',\n    BETWEEN500_1000 = '>500&<1000',\n    OVER1000 = '>1000'\n}\n","export enum SortValue {\n    POPULAR = 'popular',\n    NEWEST = 'newest',\n    HIGH_PRICE = 'highPrice',\n    LOW_PRICE = 'lowPrice'\n}\n","<div class=\"row filter-container\">\r\n  <div class=\"col-12 mb-2\">\r\n    <mat-card class=\"filter--zone-1 d-flex align-items-center\">\r\n      <i class=\"fas fa-filter\"></i>\r\n      <span class=\"filter--title pl-2\">FILTREAZĂ DUPĂ</span>\r\n    </mat-card>\r\n  </div>\r\n  <div class=\"col-12\">\r\n    <mat-card class=\"filter--zone-2\">\r\n      <mat-tree [dataSource]=\"dataSource\"\r\n                [treeControl]=\"treeControl\">\r\n        <!-- This is the tree node template for leaf nodes -->\r\n        <mat-tree-node *matTreeNodeDef=\"let node\"\r\n                       matTreeNodePadding>\r\n          <!-- use a disabled button to provide padding for tree leaf -->\r\n          <button mat-icon-button\r\n                  disabled></button>\r\n          <mat-checkbox class=\"checklist-leaf-node\"\r\n                        [checked]=\"checklistSelection.isSelected(node)\"\r\n                        (change)=\"todoLeafItemSelectionToggle(node)\">{{node.name}}</mat-checkbox>\r\n        </mat-tree-node>\r\n        <!-- This is the tree node template for expandable nodes -->\r\n        <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\"\r\n                       matTreeNodePadding>\r\n          <button mat-icon-button\r\n                  matTreeNodeToggle\r\n                  [attr.aria-label]=\"'Toggle ' + node.name\">\r\n            <span class=\"material-icons mat-icon-rtl-mirror\">\r\n              {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n            </span>\r\n          </button>\r\n          <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\r\n                        [indeterminate]=\"descendantsPartiallySelected(node)\"\r\n                        (change)=\"todoItemSelectionToggle(node)\">{{node.name}}</mat-checkbox>\r\n        </mat-tree-node>\r\n      </mat-tree>\r\n    </mat-card>\r\n  </div>\r\n</div>","import { SelectionModel } from '@angular/cdk/collections';\r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { ChangeDetectionStrategy, Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\r\nimport { PriceRange } from 'src/app/shared/enum/price-range';\r\nimport { State } from 'src/app/shared/enum/state';\r\nimport { FilterFlatNode } from 'src/app/shared/interface/filter-flat-node';\r\nimport { FilterNode } from 'src/app/shared/interface/filter-node';\r\n\r\n@Component({\r\n  selector: 'app-shop-products-filter',\r\n  templateUrl: './shop-products-filter.component.html',\r\n  styleUrls: ['./shop-products-filter.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ShopProductsFilterComponent implements OnInit {\r\n\r\n  @Output() clickFilterItem = new EventEmitter();\r\n\r\n  private transformer = (node: FilterNode, level: number) => {\r\n    return <FilterFlatNode>{\r\n      expandable: !!node.children && node.children.length > 0,\r\n      name: node.name,\r\n      level,\r\n      id: node.id,\r\n    };\r\n  }\r\n\r\n  treeControl = new FlatTreeControl<FilterFlatNode>(node => node.level, node => node.expandable);\r\n\r\n  treeFlattener = new MatTreeFlattener(this.transformer, (node: any) => node.level, (node: any) => node.expandable, (node: any) => node.children);\r\n\r\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n\r\n  /** The selection for checklist */\r\n  checklistSelection = new SelectionModel<FilterFlatNode>(true /* multiple */);\r\n\r\n  getLevel = (node: FilterFlatNode) => node.level;\r\n\r\n  constructor() {\r\n    this.dataSource.data = [\r\n      {\r\n        name: 'Disponibilitate',\r\n        id: '',\r\n        children: [\r\n          { name: 'În stoc', id: State.STOCK },\r\n          { name: 'La comanda', id: State.COMMAND }\r\n        ]\r\n      },\r\n      {\r\n        name: 'Producător',\r\n        id: '',\r\n        children: [\r\n          { name: 'Continental', id: 'Continental' },\r\n          { name: 'Pirelli', id: 'Pirelli' },\r\n          { name: 'Michelin', id: 'Michelin' },\r\n          { name: 'Bridgestone', id: 'Bridgestone' },\r\n          { name: 'Hankook', id: 'Hankook' },\r\n          { name: 'Goodyear', id: 'Goodyear' }\r\n        ]\r\n      },\r\n      {\r\n        name: 'Preț',\r\n        id: '',\r\n        children: [\r\n          { name: 'Sub 100 lei', id: PriceRange.UNDER100 },\r\n          { name: 'Între 100 și 250 lei', id: PriceRange.BETWEEN100_250 },\r\n          { name: 'Între 250 și 500 lei', id: PriceRange.BETWEEN250_500 },\r\n          { name: 'Între 500 și 1000 lei', id: PriceRange.BETWEEN500_1000 },\r\n          { name: 'Peste 1000', id: PriceRange.OVER1000 }\r\n        ]\r\n      },\r\n      {\r\n        name: 'Lățime',\r\n        id: '',\r\n        children: [\r\n          { name: '225', id: '225' },\r\n          { name: '215', id: '1' },\r\n          { name: '235', id: '1' },\r\n          { name: '205', id: '1' },\r\n          { name: '195', id: '1' },\r\n          { name: '255', id: '1' }\r\n        ]\r\n      },\r\n      {\r\n        name: 'Înălțime',\r\n        id: '',\r\n        children: [\r\n          { name: '225', id: '1' },\r\n          { name: '215', id: '1' },\r\n          { name: '235', id: '1' },\r\n          { name: '205', id: '1' },\r\n          { name: '195', id: '1' },\r\n          { name: '255', id: '1' }\r\n        ]\r\n      },\r\n      {\r\n        name: 'Diametru',\r\n        id: '',\r\n        children: [\r\n          { name: '16', id: '1' },\r\n          { name: '17', id: '1' },\r\n          { name: '18', id: '1' },\r\n          { name: '15', id: '1' },\r\n          { name: '19', id: '1' },\r\n          { name: '20', id: '1' }\r\n        ]\r\n      }\r\n    ];\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.treeControl.expand(this.treeControl.dataNodes[0]);\r\n    this.treeControl.expand(this.treeControl.dataNodes[3]);\r\n  }\r\n\r\n  /* Get the parent node of a node */\r\n  getParentNode(node: FilterFlatNode): FilterFlatNode | null {\r\n    const currentLevel = this.getLevel(node);\r\n\r\n    if (currentLevel < 1) {\r\n      return null;\r\n    }\r\n\r\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\r\n\r\n    for (let i = startIndex; i >= 0; i--) {\r\n      const currentNode = this.treeControl.dataNodes[i];\r\n\r\n      if (this.getLevel(currentNode) < currentLevel) {\r\n        return currentNode;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Whether all the descendants of the node are selected. */\r\n  descendantsAllSelected(node: FilterFlatNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\r\n      return this.checklistSelection.isSelected(child);\r\n    });\r\n    return descAllSelected;\r\n  }\r\n\r\n  /** Whether part of the descendants are selected */\r\n  descendantsPartiallySelected(node: FilterFlatNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\r\n    return result && !this.descendantsAllSelected(node);\r\n  }\r\n\r\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\r\n  todoItemSelectionToggle(node: FilterFlatNode): void {\r\n    console.log(node, 'todoItemSelectionToggle node');\r\n    this.checklistSelection.toggle(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    this.checklistSelection.isSelected(node)\r\n      ? this.checklistSelection.select(...descendants)\r\n      : this.checklistSelection.deselect(...descendants);\r\n\r\n    // Force update for the parent\r\n    descendants.forEach(child => this.checklistSelection.isSelected(child));\r\n    this.checkAllParentsSelection(node);\r\n  }\r\n\r\n  /** Check root node checked state and change it accordingly */\r\n  checkRootNodeSelection(node: FilterFlatNode): void {\r\n    const nodeSelected = this.checklistSelection.isSelected(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\r\n      return this.checklistSelection.isSelected(child);\r\n    });\r\n    if (nodeSelected && !descAllSelected) {\r\n      this.checklistSelection.deselect(node);\r\n    } else if (!nodeSelected && descAllSelected) {\r\n      this.checklistSelection.select(node);\r\n    }\r\n  }\r\n\r\n  /* Checks all the parents when a leaf node is selected/unselected */\r\n  checkAllParentsSelection(node: FilterFlatNode): void {\r\n    let parent: FilterFlatNode | null = this.getParentNode(node);\r\n    while (parent) {\r\n      this.checkRootNodeSelection(parent);\r\n      parent = this.getParentNode(parent);\r\n    }\r\n  }\r\n\r\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\r\n  todoLeafItemSelectionToggle(node: FilterFlatNode): void {\r\n    console.log(node, 'todoLeafItemSelectionToggle node');\r\n    this.checklistSelection.toggle(node);\r\n    this.checkAllParentsSelection(node);\r\n  }\r\n\r\n  hasChild = (_: number, node: FilterFlatNode) => node.expandable;\r\n}\r\n","<div class=\"row\">\r\n  <div class=\"col-12 mb-2\">\r\n    <mat-card class=\"sort d-flex align-items-center\">\r\n      <i class=\"fas fa-sort-amount-up\"></i>\r\n      <span class=\"sort--title pl-2\">SORTEAZĂ DUPĂ</span>\r\n      <mat-form-field appearance=\"outline\"\r\n                      class=\"sort--select\">\r\n        <mat-label>Ați selectat:</mat-label>\r\n        <mat-select>\r\n          <mat-option>-- Niciuna --</mat-option>\r\n          <mat-option *ngFor=\"let sort of sorts\"\r\n                      [value]=\"sort.value\">\r\n            {{sort.label}}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n      <mat-button-toggle-group aria-label=\"Mod de afișare\"\r\n                               [value]=\"viewMode\"\r\n                               class=\"ml-auto\"\r\n                               (change)=\"changeViewMode($event?.value)\">\r\n        <mat-button-toggle [value]=\"templateViewMode.GRID\"><i class=\"fas fa-th\"></i></mat-button-toggle>\r\n        <mat-button-toggle [value]=\"templateViewMode.LIST\"><i class=\"fas fa-bars\"></i></mat-button-toggle>\r\n      </mat-button-toggle-group>\r\n    </mat-card>\r\n  </div>\r\n</div>","import { ChangeDetectionStrategy, Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { LocalStorageService } from 'src/app/core/services/local-storage.service';\r\nimport { SortValue } from 'src/app/shared/enum/sort-value';\r\nimport { ViewMode } from 'src/app/shared/enum/view-mode';\r\nimport { DropdownValue } from 'src/app/shared/interface/dropdown-value';\r\n\r\n@Component({\r\n  selector: 'app-shop-products-sort',\r\n  templateUrl: './shop-products-sort.component.html',\r\n  styleUrls: ['./shop-products-sort.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ShopProductsSortComponent implements OnInit {\r\n\r\n  @Output() clickViewMode = new EventEmitter<ViewMode>();\r\n\r\n  sorts: DropdownValue[] = [\r\n    { value: SortValue.POPULAR, label: 'Cele mai populare' },\r\n    { value: SortValue.NEWEST, label: 'Cele mai noi' },\r\n    { value: SortValue.HIGH_PRICE, label: 'Preț crescător' },\r\n    { value: SortValue.LOW_PRICE, label: 'Preț descrescător' }\r\n  ];\r\n  viewMode = ViewMode.GRID;\r\n  templateViewMode = ViewMode;\r\n\r\n  constructor(private localStorageService: LocalStorageService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.checkLocalStorageViewMode();\r\n  }\r\n\r\n  changeViewMode(value: any): void {\r\n    // this.localStorageService.storeValue(value, EnumLocalStorageKeysName.SORT_VIEW);\r\n\r\n    // if (value) {\r\n    //   this.clickViewMode.emit(value);\r\n    // }\r\n  }\r\n\r\n  checkLocalStorageViewMode(): void {\r\n    // const localStorageSortView = this.localStorageService.getStorageValueByKey(EnumLocalStorageKeysName.SORT_VIEW);\r\n\r\n    // if (localStorageSortView != null) {\r\n    //   this.viewMode = localStorageSortView;\r\n    //   this.changeViewMode(localStorageSortView);\r\n    // }\r\n  }\r\n}\r\n","<ng-container [ngSwitch]=\"viewMode\">\r\n  <div *ngSwitchCase=\"viewModeTemplate.GRID\"\r\n       class=\"row\">\r\n    <div *ngIf=\"loading\"\r\n         class=\"col-12\">\r\n      <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\r\n    </div>\r\n    <!-- <div *ngFor=\"let product of products;trackBy: trackByService.product\"\r\n         class=\"col-sm-12 col-md-6 col-lg-6 col-xl-4 mb-2 product-container\">\r\n      <mat-card class=\"product-card\">\r\n        <mat-chip matTooltip=\"Super ofertă, nu o rata!\"\r\n                  matTooltipPosition=\"above\"\r\n                  selected>- 20%</mat-chip>\r\n        <div mat-card-image\r\n             class=\"product-card__img text-center\">\r\n          <img src=\"../../assets/pictures/tires/tire.png\"\r\n               [routerLink]=\"['/products/' + product.id]\"\r\n               [alt]=\"product.name\">\r\n        </div>\r\n        <mat-card-title>{{product.name | uppercase}}</mat-card-title>\r\n        <mat-card-subtitle>{{product.producer | uppercase}}</mat-card-subtitle>\r\n        <mat-card-content>\r\n          <div class=\"product-card__price text-center\">\r\n            <span class=\"price\">{{200 | azetDtCurrency}}</span>\r\n            <span class=\"sale mx-2\"\r\n                  matTooltip=\"Super ofertă, nu o rata!\"\r\n                  matTooltipPosition=\"above\"><del>{{300 | azetDtCurrency}}</del></span>\r\n            <div class=\"without-tax\">\r\n              {{280 | azetDtCurrency}} Fără TVA\r\n            </div>\r\n          </div>\r\n          <mat-divider inset></mat-divider>\r\n          <app-product-state [productState]=\"product.state\"\r\n                             [productQuantity]=\"product.quantity\"></app-product-state>\r\n          <mat-chip-list aria-label=\"Vehicule\">\r\n            <mat-chip *ngFor=\"let carCategory of product.carCategories\">\r\n              {{carCategory}}\r\n            </mat-chip>\r\n          </mat-chip-list>\r\n        </mat-card-content>\r\n        <mat-divider inset></mat-divider>\r\n        <mat-card-actions>\r\n          <div class=\"d-flex justify-content-between\">\r\n            <button mat-raised-button\r\n                    color=\"primary\"\r\n                    (click)=\"addCartProduct(product)\">\r\n              <span class=\"material-icons\">\r\n                add_shopping_cart\r\n              </span>\r\n              ADAUGĂ ÎN COȘ\r\n            </button>\r\n            <app-copy-link [pathUrl]=\"'/products/'+ product.id\"></app-copy-link>\r\n          </div>\r\n        </mat-card-actions>\r\n      </mat-card>\r\n    </div> -->\r\n  </div>\r\n  <div *ngSwitchCase=\"viewModeTemplate.LIST\"\r\n       class=\"row\">\r\n    <div *ngIf=\"loading\"\r\n         class=\"col-12\">\r\n      <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\r\n    </div>\r\n    <!-- <div *ngFor=\"let product of products;trackBy: trackByService.product\"\r\n         class=\"col-12 mb-2 product-container\">\r\n      <mat-card class=\"product-card\">\r\n        <mat-card-title-group>\r\n          <mat-card-title class=\"align-items-center\">\r\n            {{product.name | uppercase}}\r\n          </mat-card-title>\r\n          <mat-card-subtitle>\r\n            {{product.producer | uppercase}}\r\n          </mat-card-subtitle>\r\n        </mat-card-title-group>\r\n        <mat-card-content>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12 col-md-4 col-lg-4 col-xl-3\">\r\n              <div mat-card-image\r\n                   class=\"product-card__img text-center\">\r\n                <img src=\"../../assets/pictures/tires/tire.png\"\r\n                     [routerLink]=\"['/products/' + product.id]\"\r\n                     [alt]=\"product.name\">\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-12 col-md-8 col-lg-8 col-xl-9\">\r\n              <div class=\"product-card__price\">\r\n                <span class=\"price\">{{product.price | azetDtCurrency}}</span>\r\n                <span class=\"sale mx-2\"\r\n                      matTooltip=\"Super ofertă, nu o rata!\"\r\n                      matTooltipPosition=\"above\">\r\n                  <del>{{300 | azetDtCurrency}}</del>\r\n                  ( - 20%)\r\n                </span>\r\n                <div class=\"without-tax\">\r\n                  {{280 | azetDtCurrency}} Fără TVA\r\n                </div>\r\n              </div>\r\n              <mat-divider inset></mat-divider>\r\n              <app-product-state [productState]=\"product.state\"\r\n                                 [productQuantity]=\"product.quantity\"></app-product-state>\r\n              <mat-chip-list aria-label=\"Vehicule\">\r\n                <mat-chip *ngFor=\"let carCategory of product.carCategories\">\r\n                  {{carCategory}}\r\n                </mat-chip>\r\n              </mat-chip-list>\r\n              <mat-divider inset\r\n                           class=\"my-2\"></mat-divider>\r\n              <div *ngIf=\"product.size\">Dimensiune: {{product.size}}</div>\r\n              <div *ngIf=\"product.profile\">Profil: {{product.profile}}</div>\r\n            </div>\r\n          </div>\r\n        </mat-card-content>\r\n        <mat-divider inset></mat-divider>\r\n        <mat-card-actions>\r\n          <div class=\"d-flex justify-content-between\">\r\n            <button *ngIf=\"options && options.showAddButton\"\r\n                    mat-raised-button\r\n                    color=\"primary\"\r\n                    (click)=\"addCartProduct(product)\">\r\n              <span class=\"material-icons\">\r\n                add_shopping_cart\r\n              </span>\r\n              ADAUGĂ ÎN COȘ\r\n            </button>\r\n            <button *ngIf=\"options && options.showRemoveButton\"\r\n                    mat-stroked-button\r\n                    color=\"primary\"\r\n                    (click)=\"removeCartProduct(product)\">\r\n              <span class=\"material-icons\">\r\n                delete\r\n              </span>\r\n              SCOATE DIN COȘ ( {{product.nbOfProducts}} )\r\n            </button>\r\n            <app-copy-link [pathUrl]=\"'/products/'+ product.id\"></app-copy-link>\r\n          </div>\r\n        </mat-card-actions>\r\n      </mat-card>\r\n    </div> -->\r\n  </div>\r\n</ng-container>","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Product } from '../../class/base-cart-item';\r\nimport { State } from '../../enum/state';\r\nimport { ViewMode } from '../../enum/view-mode';\r\n\r\n@Component({\r\n  selector: 'app-products-card',\r\n  templateUrl: './products-card.component.html',\r\n  styleUrls: ['./products-card.component.scss'],\r\n  // When using OnPush detectors, then the framework will check an OnPush\r\n  // component when any of its input properties changes, when it fires\r\n  // an event, or when an observable fires an event ~ Victor Savkin (Angular Team)\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ProductsCardComponent implements OnInit {\r\n\r\n  @Input() products: Product[] | null = [];\r\n  @Input() viewMode = ViewMode.GRID;\r\n  @Input() loading: boolean | null = false;\r\n  @Input() options: any = {\r\n    showAddButton: true,\r\n    showRemoveButton: false\r\n  };\r\n  @Output() clickAddToCart = new EventEmitter<Product>();\r\n  @Output() clickRemoveToCart = new EventEmitter<Product>();\r\n\r\n  viewModeTemplate = ViewMode;\r\n  stateTemplate = State;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  addCartProduct(product: Product): void {\r\n    this.clickAddToCart.emit(product);\r\n  }\r\n\r\n  removeCartProduct(product: Product): void {\r\n    this.clickRemoveToCart.emit(product);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from 'src/app/shared/class/base-cart-item';\nimport { ViewMode } from 'src/app/shared/enum/view-mode';\nimport { CartService } from 'src/app/shared/service/cart.service';\nimport { ProductsService } from 'src/app/shared/service/products.service';\n\n@Component({\n  selector: 'app-shop-products-view',\n  templateUrl: './shop-products-view.component.html',\n  styleUrls: ['./shop-products-view.component.scss']\n})\nexport class ShopProductsViewComponent implements OnInit {\n\n  viewMode = ViewMode.GRID;\n  products$ = new Observable<Product[]>();\n\n  constructor(\n    private productsService: ProductsService,\n    private cartService: CartService\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.getProducts();\n  }\n\n  getProducts() {\n    this.products$ = this.productsService.getAll();\n  }\n\n  changeViewMode(viewMode: ViewMode): void {\n    this.viewMode = viewMode;\n  }\n\n  // addCartProduct(product: DemoCartItem) {\n  //   this.cartService.addCartProduct(product);\n  // }\n\n}\n","<div class=\"row justify-content-center mt-5\">\n  <div class=\"col-3\">\n    <app-shop-products-filter></app-shop-products-filter>\n  </div>\n  <div class=\"col-9\">\n    <app-shop-products-sort (clickViewMode)=\"changeViewMode($event)\"></app-shop-products-sort>\n    <app-products-card [products]=\"products$ | async\"></app-products-card>\n\n\n    <!-- [viewMode]=\"viewMode\"\n                         (clickAddToCart)=\"addCartProduct($event)\" -->\n  </div>\n</div>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ShopProductDetailsComponent } from './shop-product-details/shop-product-details.component';\r\nimport { ShopProductsViewComponent } from './shop-products-view/shop-products-view.component';\r\n\r\nconst routes: Routes = [\r\n    { path: '', component: ShopProductsViewComponent },\r\n    { path: ':id', component: ShopProductDetailsComponent }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\n\r\nexport class ShopProductsRoutingModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { ShopProductDetailsComponent } from './shop-product-details/shop-product-details.component';\r\nimport { ShopProductsFilterComponent } from './shop-products-filter/shop-products-filter.component';\r\nimport { ShopProductsRoutingModule } from './shop-products-routing.module';\r\nimport { ShopProductsSortComponent } from './shop-products-sort/shop-products-sort.component';\r\nimport { ShopProductsViewComponent } from './shop-products-view/shop-products-view.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    ShopProductsRoutingModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    ShopProductsFilterComponent,\r\n    ShopProductsSortComponent,\r\n    ShopProductDetailsComponent,\r\n    ShopProductsViewComponent\r\n  ],\r\n  providers: [\r\n  ]\r\n})\r\n\r\nexport class ShopProductsModule {\r\n}\r\n"]}